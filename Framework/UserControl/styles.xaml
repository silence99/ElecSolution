<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" 
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing" xmlns:d="http://schemas.microsoft.com/expression/blend/2008" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" mc:Ignorable="d"
    xmlns:ext="clr-namespace:Framework">
    <ext:BoolToVisibilityConverter x:Key="boolToVis" />

    <Style TargetType="{x:Type TextBlock}" 
           x:Key="GridBlockStyle">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Visibility" 
              Value="{Binding Path=IsSelected, 
              RelativeSource={RelativeSource FindAncestor, 
                        AncestorType={x:Type ListViewItem}},
              Converter={StaticResource boolToVis}, 
                         ConverterParameter=False}" />
    </Style>
    <Style TargetType="{x:Type FrameworkElement}" 
           x:Key="GridEditStyle">
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Visibility" 
              Value="{Binding Path=IsSelected, 
              RelativeSource={RelativeSource FindAncestor, 
                        AncestorType={x:Type ListViewItem}},
              Converter={StaticResource boolToVis}, 
                         ConverterParameter=True}" />
    </Style>
    <Style x:Key="buttonFocusVisual">
    	<Setter Property="Control.Template">
    		<Setter.Value>
    			<ControlTemplate>
    				<Rectangle Margin="-2" StrokeThickness="0" Stroke="Red" StrokeDashArray="1 2"/>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
	<Style x:Key="MainButtonstyle" TargetType="{x:Type Button}">
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Background">
					<Setter.Value>
						<ImageBrush ImageSource="brown-btn60-disabled.png" />
					</Setter.Value>
				</Setter>
                <Setter Property="Foreground" Value="#faf8f6"/>
			</Trigger>
		</Style.Triggers>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
							<Rectangle.Fill>
								<ImageBrush ImageSource="brown-btn60.png"/>
							</Rectangle.Fill>
						</Rectangle>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True"/>
						<Trigger Property="IsDefaulted" Value="True"/>
						<Trigger Property="IsMouseOver" Value="True"/>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Fill" TargetName="rectangle">
								<Setter.Value>
									<ImageBrush ImageSource="brown-btn60-active.png"/>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Fill" TargetName="rectangle">
								<Setter.Value>
									<ImageBrush ImageSource="brown-btn60-disabled.png"/>
								</Setter.Value>
							</Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="FontSize" Value="14"/>
		<Setter Property="FontFamily" Value="SimSun"/>
		<Setter Property="Foreground" Value="#FFEEE7DE"/>
		<Setter Property="Content" Value="按钮"/>
		<Setter Property="Height" Value="50"/>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
	</Style>

    <Style x:Key="MainButtonstyle80" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="brown-btn80-disabled.png" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="#b1a59a"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="brown-btn80.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="brown-btn80-active.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="brown-btn80-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="SimSun"/>
        <Setter Property="Foreground" Value="#FFEEE7DE"/>
        <Setter Property="Content" Value="按钮"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
    </Style>
<Style x:Key="MainButtonstyle80f" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="brown-btn80-disabled.png" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="#faf8f6"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="brown-btn80.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="brown-btn80-active.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="brown-btn80-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="SimSun"/>
        <Setter Property="Foreground" Value="#FFEEE7DE"/>
        <Setter Property="Content" Value="按钮"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
    </Style>
    <Style x:Key="MainButtonstyle150" TargetType="{x:Type Button}">
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="brown-btn150-disabled.png" />
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="#faf8f6"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="brown-btn150.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="brown-btn150-active.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="brown-btn150-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="SimSun"/>
        <Setter Property="Foreground" Value="#FFEEE7DE"/>
        <Setter Property="Content" Value="按钮"/>
        <Setter Property="Height" Value="50"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
    </Style>
    
    
    <Style x:Key="simpleButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
							<Rectangle.Fill>
								<ImageBrush ImageSource="gray-btn60.png"/>
							</Rectangle.Fill>
						</Rectangle>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True"/>
						<Trigger Property="IsDefaulted" Value="True"/>
						<Trigger Property="IsMouseOver" Value="True"/>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Fill" TargetName="rectangle">
								<Setter.Value>
									<ImageBrush ImageSource="gray-btn60-active.png"/>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Fill" TargetName="rectangle">
								<Setter.Value>
									<ImageBrush ImageSource="gray-btn60-disabled.png"/>
								</Setter.Value>
							</Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="FontSize" Value="14"/>
		<Setter Property="FontFamily" Value="SimSun"/>
		<Setter Property="Foreground" Value="#FF776B5F"/>
		<Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
		<Style.Triggers>
			<Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#b1a59a"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Foreground" Value="#FFEEE7DE"/>
			</Trigger>
		</Style.Triggers>
        
	</Style>

    <Style x:Key="NumButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="num-bg.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="num-bg-hover.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="num-bg.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="SimSun"/>
        <Setter Property="Foreground" Value="#FF776B5F"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#FF776B5F"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#FFEEE7DE"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="DeleteButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="delete-bg.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="delete-bg-hover.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="delete-bg.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="SimSun"/>
        <Setter Property="Foreground" Value="#FF776B5F"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#FF776B5F"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#FFEEE7DE"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="confirmButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="confirm-bg.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="confirm-bg-hover.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="confirm-bg.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="SimSun"/>
        <Setter Property="Foreground" Value="#FF776B5F"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#FF776B5F"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#FFEEE7DE"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="SeatButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="gray-btn60.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="gray-btn60-active.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="gray-btn60-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="30"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="Foreground" Value="#FF675446"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#b1a59a"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#FFFFFFFF"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="SeatButtonStyleCheck" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="gray-btn60-active.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="gray-btn60-active.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="gray-btn60-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="30"/>
        <Setter Property="FontFamily" Value="Arial"/>
        <Setter Property="Foreground" Value="#FFFFFFFF"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#b1a59a"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#FFFFFFFF"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="simpleButtonStyle80" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="gray-btn80.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="gray-btn80-active.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="gray-btn80-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="SimSun"/>
        <Setter Property="Foreground" Value="#FF776B5F"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#b1a59a"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#FFEEE7DE"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="simpleButtonStyle150" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="gray-btn150.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="gray-btn150-active.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="gray-btn150-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="SimSun"/>
        <Setter Property="Foreground" Value="#FF776B5F"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#b1a59a"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#FFEEE7DE"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="LoginButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
							<Rectangle.Fill>
								<ImageBrush ImageSource="login-btn.png"/>
							</Rectangle.Fill>
						</Rectangle>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True"/>
						<Trigger Property="IsDefaulted" Value="True"/>
						<Trigger Property="IsMouseOver" Value="True"/>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Fill" TargetName="rectangle">
								<Setter.Value>
									<ImageBrush ImageSource="login-btn-hover.png"/>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False"/>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="Height" Value="60"/>
		<Setter Property="Width" Value="120"/>
		<Setter Property="FontSize" Value="14"/>
		<Setter Property="FontFamily" Value="SimSun"/>
		<Setter Property="BorderBrush" Value="White"/>
		<Setter Property="Foreground" Value="White"/>
		<Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
	</Style>
	<Style x:Key="MemuButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
							<Rectangle.Fill>
								<ImageBrush ImageSource="menu-btn.png"/>
							</Rectangle.Fill>
						</Rectangle>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="Fill" TargetName="rectangle">
								<Setter.Value>
									<ImageBrush ImageSource="menu-btn-hover.png"/>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsDefaulted" Value="True"/>
						<Trigger Property="IsMouseOver" Value="True"/>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Fill" TargetName="rectangle">
								<Setter.Value>
									<ImageBrush ImageSource="menu-btn-active.png"/>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False"/>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="FontSize" Value="14"/>
		<Setter Property="FontFamily" Value="SimSun"/>
		<Setter Property="Width" Value="180"/>
		<Setter Property="Height" Value="60"/>
		<Setter Property="Foreground" Value="#FF776B5F"/>
		<Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
		<Setter Property="BorderThickness" Value="0,0,1,1"/>
		<Style.Triggers>
			<Trigger Property="IsFocused" Value="True">
				<Setter Property="Foreground" Value="#FFEEE7DE"/>
			</Trigger>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Foreground" Value="#FFEEE7DE"/>
			</Trigger>
		</Style.Triggers>
	</Style>
	<Style x:Key="secondMenuButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Template">
            
			<Setter.Value>

                
                <ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
							<Rectangle.Fill>
								<ImageBrush ImageSource="menu-yellow-btn.png"/>
							</Rectangle.Fill>
						</Rectangle>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True"/>
						<Trigger Property="IsDefaulted" Value="True"/>
						<Trigger Property="IsMouseOver" Value="True"/>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Fill" TargetName="rectangle">
								<Setter.Value>
									<ImageBrush ImageSource="menu-yellow-btn-hover.png"/>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False"/>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderThickness" Value="0"/>
		<Setter Property="FontSize" Value="14"/>
		<Setter Property="FontFamily" Value="SimSun"/>
		<Setter Property="Width" Value="180"/>
		<Setter Property="Height" Value="80"/>
		<Setter Property="Foreground" Value="#FF776B5F"/>
		<Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#b1a59a"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#FFEEE7DE"/>
            </Trigger>
        </Style.Triggers>
	</Style>
    <Style TargetType="{x:Type ext:ListSortDecorator}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Top"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ext:ListSortDecorator}">
                    <Path x:Name="path" Data="M0,1L2,1L1,0Z"
						  Fill="{TemplateBinding Foreground}"
						  Stroke="{TemplateBinding Foreground}"
						  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
						  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
						  Width="7" Height="4" Stretch="Fill"/>
                    <ControlTemplate.Triggers>
                        <Trigger Property="SortDirection"
								 Value="Descending">
                            <Setter TargetName="path"
									Property="Data"
									Value="M0,0L2,0 1,1z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- 应该在此定义资源字典条目。-->
	
	 <Style x:Key="styleCalendar" TargetType="{x:Type Calendar}" >
            <Setter Property="Height" Value="Auto" />
            <Setter Property="Width" Value="Auto" />
            <Setter Property="LayoutTransform">
                <Setter.Value>
                    <TransformGroup>
                        <ScaleTransform ScaleX="2" ScaleY="2"/>
                    </TransformGroup>
                </Setter.Value>
            </Setter>
            <Setter Property="BorderBrush" Value="#FFE87439"/>
            <Setter Property="FontFamily" Value="Arial"/>
            <Setter Property="BorderThickness" Value="0.5"/>
        </Style>
   
	 <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
	 	<Setter Property="Template">
	 		<Setter.Value>
	 			<ControlTemplate TargetType="{x:Type CheckBox}">
	 				<Grid>
	 					<Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
	 						<Rectangle.Fill>
	 							<ImageBrush ImageSource="checkbox.png"/>
	 						</Rectangle.Fill>
	 					</Rectangle>
	 					<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content=""/>
	 				</Grid>
	 				<ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"></Condition>
                                <Condition Property="IsChecked" Value="False"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="checkbox-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"></Condition>
                                <Condition Property="IsChecked" Value="True"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="checkbox-check-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True">
	 						<Setter Property="Fill" TargetName="rectangle">
	 							<Setter.Value>
                                    <ImageBrush ImageSource="checkbox-checked.png"/>
	 							</Setter.Value>
	 						</Setter>
	 					</Trigger>
	 					<Trigger Property="IsPressed" Value="True">
	 						<Setter Property="Fill" TargetName="rectangle">
	 							<Setter.Value>
                                    <ImageBrush ImageSource="checkbox-on.png"/>
	 							</Setter.Value>
	 						</Setter>
	 					</Trigger>
	 				</ControlTemplate.Triggers>
	 			</ControlTemplate>
	 		</Setter.Value>
	 	</Setter>
	 </Style>
	 <Style x:Key="simpleCheckBoxStyle" TargetType="{x:Type CheckBox}">
	 	<Setter Property="Template">
	 		<Setter.Value>
	 			<ControlTemplate TargetType="{x:Type CheckBox}">
	 				<Grid Height="50" Width="176">
	 					<Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0" Height="50">
	 						<Rectangle.Fill>
	 							<ImageBrush ImageSource="check-btn.png"/>
	 						</Rectangle.Fill>
	 					</Rectangle>
	 					<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Margin="52,11.015,0,8.015" Height="Auto" Width="112.02" d:LayoutOverrides="Height"/>
	 				</Grid>
	 				<ControlTemplate.Triggers>
	 					<Trigger Property="IsChecked" Value="True">
	 						<Setter Property="Fill" TargetName="rectangle">
	 							<Setter.Value>
	 								<ImageBrush ImageSource="check-btn-active.png"/>
	 							</Setter.Value>
	 						</Setter>
	 					</Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"></Condition>
                                <Condition Property="IsChecked" Value="False"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="check-btn-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"></Condition>
                                <Condition Property="IsChecked" Value="True"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="check-btn-active-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
	 						<Setter Property="Fill" TargetName="rectangle">
	 							<Setter.Value>
	 								<ImageBrush ImageSource="check-btn-on.png"/>
	 							</Setter.Value>
	 						</Setter>
	 					</Trigger>
	 				</ControlTemplate.Triggers>
	 			</ControlTemplate>
	 		</Setter.Value>
	 	</Setter>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="SimSun"/>
        <Setter Property="Foreground" Value="#FF776B5F"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#b1a59a"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#FFEEE7DE"/>
            </Trigger>
        </Style.Triggers>
    </Style>
	
	<Style x:Key="simpleCheckBoxStyleWidth" TargetType="{x:Type CheckBox}">
	 	<Setter Property="Template">
	 		<Setter.Value>
	 			<ControlTemplate TargetType="{x:Type CheckBox}">
	 				<Grid Height="50" Width="176">
	 					<Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0" Height="50" Margin="0,0,-131,0">
	 						<Rectangle.Fill>
	 							<ImageBrush ImageSource="check-btn.png"/>
	 						</Rectangle.Fill>
	 					</Rectangle>
	 					<ContentPresenter HorizontalAlignment="Stretch" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch" Margin="85.99,17,-130,17.03" Height="Auto" Width="Auto" Content="程序运行过程中允许操作系统关机" d:LayoutOverrides="Height"/>
	 				</Grid>
	 				<ControlTemplate.Triggers>
	 					<Trigger Property="IsChecked" Value="True">
	 						<Setter Property="Fill" TargetName="rectangle">
	 							<Setter.Value>
	 								<ImageBrush ImageSource="check-btn-active.png"/>
	 							</Setter.Value>
	 						</Setter>
	 					</Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"></Condition>
                                <Condition Property="IsChecked" Value="False"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="check-btn-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"></Condition>
                                <Condition Property="IsChecked" Value="True"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="check-btn-active-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <Trigger Property="IsPressed" Value="True">
	 						<Setter Property="Fill" TargetName="rectangle">
	 							<Setter.Value>
	 								<ImageBrush ImageSource="check-btn-on.png"/>
	 							</Setter.Value>
	 						</Setter>
	 					</Trigger>
	 				</ControlTemplate.Triggers>
	 			</ControlTemplate>
	 		</Setter.Value>
	 	</Setter>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="SimSun"/>
        <Setter Property="Foreground" Value="#FF776B5F"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#b1a59a"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#FFEEE7DE"/>
            </Trigger>
        </Style.Triggers>
    </Style>
	 
    <Style x:Key="LeftButton" TargetType="{x:Type Button}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Path x:Name="path" Data="M18.75,0 L-0.25,24.25 18.5,48.75 53.75,48.5 53.75,0.25 z" Stretch="Fill" Stroke="Black" StrokeThickness="0">
							<Path.Fill>
								<ImageBrush ImageSource="l-page-btn.png"/>
							</Path.Fill>
						</Path>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="Fill" TargetName="path">
								<Setter.Value>
									<ImageBrush ImageSource="l-page-btn.png"/>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsDefaulted" Value="True"/>
						<Trigger Property="IsMouseOver" Value="True"/>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Fill" TargetName="path">
								<Setter.Value>
									<ImageBrush ImageSource="l-page-btn-active.png"/>
								</Setter.Value>
							</Setter>
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Fill" TargetName="path">
								<Setter.Value>
									<ImageBrush ImageSource="l-page-btn-disabled.png"/>
								</Setter.Value>
							</Setter>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
	</Style>

    <Style x:Key="RightButton" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Path x:Name="path" Data="M0.75,0.5 L35.25,0.5 54.25,24.75 35.5,48.75 0.75,48.25 z" Stretch="Fill" Stroke="Black" StrokeThickness="0">
                            <Path.Fill>
                                <ImageBrush ImageSource="r-page-btn.png"/>
                            </Path.Fill>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="path">
                                <Setter.Value>
                                    <ImageBrush ImageSource="r-page-btn-active.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="path">
                                <Setter.Value>
                                    <ImageBrush ImageSource="r-page-btn-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
    </Style>
    <Style x:Key="TabButton" TargetType="{x:Type Button}">
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Button}">
    				<Grid>
    					<Rectangle x:Name="rectangle" Stroke="Black" StrokeThickness="0">
    						<Rectangle.Fill>
    							<ImageBrush ImageSource="gray-btn60.png"/>
    						</Rectangle.Fill>
    					</Rectangle>
    					<ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    					<ed:RegularPolygon x:Name="regularPolygon" Height="6" InnerRadius="1" Margin="26.833,0,25.833,-6" PointCount="3" Stretch="Fill" Stroke="Black" StrokeThickness="0" VerticalAlignment="Bottom" Width="Auto" RenderTransformOrigin="0.5,0.5" Fill="{x:Null}">
    						<ed:RegularPolygon.RenderTransform>
    							<TransformGroup>
    								<ScaleTransform/>
    								<SkewTransform/>
    								<RotateTransform/>
    								<TranslateTransform/>
    							</TransformGroup>
    						</ed:RegularPolygon.RenderTransform>
    					</ed:RegularPolygon>
    				</Grid>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsFocused" Value="True"/>
    					<Trigger Property="IsDefaulted" Value="True"/>
    					<Trigger Property="IsMouseOver" Value="True"/>
    					<Trigger Property="IsPressed" Value="True">
    						<Setter Property="Fill" TargetName="rectangle">
    							<Setter.Value>
    								<ImageBrush ImageSource="gray-btn60-active.png"/>
    							</Setter.Value>
    						</Setter>
    						<Setter Property="RenderTransform" TargetName="regularPolygon">
    							<Setter.Value>
    								<TransformGroup>
    									<ScaleTransform/>
    									<SkewTransform/>
    									<RotateTransform Angle="-179.21"/>
    									<TranslateTransform/>
    								</TransformGroup>
    							</Setter.Value>
    						</Setter>
    						<Setter Property="Height" TargetName="regularPolygon" Value="3.989"/>
    						<Setter Property="Margin" TargetName="regularPolygon" Value="26.179,0,26.487,-3.989"/>
    						<Setter Property="Fill" TargetName="regularPolygon" Value="#FF675446"/>
    					</Trigger>
    					<Trigger Property="IsEnabled" Value="False">
    						<Setter Property="Fill" TargetName="rectangle">
    							<Setter.Value>
    								<ImageBrush ImageSource="gray-btn60-disabled.png"/>
    							</Setter.Value>
    						</Setter>
    					</Trigger>
    				</ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    	<Setter Property="Foreground" Value="#FF776B5F"/>
    	<Style.Triggers>
    		<Trigger Property="IsPressed" Value="True">
    			<Setter Property="Foreground" Value="#FFEEE7DE"/>
    		</Trigger>
    	</Style.Triggers>
    </Style>

    <Style x:Key="TabButtonCheck" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" Stroke="Black" StrokeThickness="0">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="gray-btn60-active.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        <ed:RegularPolygon x:Name="regularPolygon" Height="7.661" InnerRadius="1" Margin="47.864,0,49.396,-8.275" PointCount="3" Stretch="Fill" Stroke="Black" StrokeThickness="0" VerticalAlignment="Bottom" Width="Auto" RenderTransformOrigin="0.5,0.5" Fill="#FF675446">
                            <ed:RegularPolygon.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="178.423"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </ed:RegularPolygon.RenderTransform>
                        </ed:RegularPolygon>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="gray-btn60-active.png"/>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="RenderTransform" TargetName="regularPolygon">
                                <Setter.Value>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform Angle="-179.21"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Height" TargetName="regularPolygon" Value="3.989"/>
                            <Setter Property="Margin" TargetName="regularPolygon" Value="26.179,0,26.487,-3.989"/>
                            <Setter Property="Fill" TargetName="regularPolygon" Value="#FF675446"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="gray-btn60-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="#FFEEE7DE"/>
        <Style.Triggers>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#FFEEE7DE"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RadioButtonStyle" TargetType="{x:Type RadioButton}">
    	<Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
		<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type RadioButton}">
    				<Grid Height="50">
    					<Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0">
    						<Rectangle.Fill>
    							<ImageBrush ImageSource="check-btn.png"/>
    						</Rectangle.Fill>
    					</Rectangle>
    					<ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"/>
    				</Grid>
    				<ControlTemplate.Triggers>
    					<Trigger Property="IsPressed" Value="True">
    						<Setter Property="Fill" TargetName="rectangle">
    							<Setter.Value>
    								<ImageBrush ImageSource="check-btn-on.png"/>
    							</Setter.Value>
    						</Setter>
    					</Trigger>
    					<Trigger Property="IsChecked" Value="True">
    						<Setter Property="Fill" TargetName="rectangle">
    							<Setter.Value>
    								<ImageBrush ImageSource="check-btn-active.png"/>
    							</Setter.Value>
    						</Setter>
    					</Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"></Condition>
                                <Condition Property="IsChecked" Value="False"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="check-btn-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                            </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"></Condition>
                                <Condition Property="IsChecked" Value="True"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="check-btn-active-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                        <!--<MultiTrigger Property="IsEnabled" Value="False">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="check-btn-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>-->
                    </ControlTemplate.Triggers>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
        
        

        
    	<Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="SimSun"/>
        <Setter Property="Foreground" Value="#FF776B5F"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#b1a59a"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#FFEEE7DE"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RadioButtonStyleWidth" TargetType="{x:Type RadioButton}">
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid Height="50" Width="240">
                        <Rectangle x:Name="rectangle" RadiusY="2" RadiusX="2" Stroke="Black" StrokeThickness="0" Margin="0,0,-73,0">
                            <Rectangle.Fill>
                                <ImageBrush ImageSource="check-btn.png"/>
                            </Rectangle.Fill>
                        </Rectangle>
                        <ContentPresenter VerticalAlignment="{TemplateBinding VerticalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"    HorizontalAlignment="Stretch" Content="程序运行过程中允许操作系统关机" Margin="88,0,-58,0" d:LayoutOverrides="Width"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="check-btn-on.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="check-btn-active.png"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"></Condition>
                                <Condition Property="IsChecked" Value="False"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="check-btn-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsEnabled" Value="False"></Condition>
                                <Condition Property="IsChecked" Value="True"></Condition>
                            </MultiTrigger.Conditions>
                            <Setter Property="Fill" TargetName="rectangle">
                                <Setter.Value>
                                    <ImageBrush ImageSource="check-btn-active-disabled.png"/>
                                </Setter.Value>
                            </Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="SimSun"/>
        <Setter Property="Foreground" Value="#FF776B5F"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#b1a59a"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="#FFEEE7DE"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <LinearGradientBrush x:Key="CustomBrush" StartPoint="0,0" EndPoint="0,1">
        <LinearGradientBrush.GradientStops>
            <GradientStop Offset="0" Color="#FFE3F4FC"/>
            <GradientStop Offset="0.38" Color="#FFD8EFFC"/>
            <GradientStop Offset="0.38" Color="#FFBEE6FD"/>
            <GradientStop Offset="1" Color="#FFA6D9F4"/>
        </LinearGradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="CustomBrush1" Color="#fff7f0e7" />


    <LinearGradientBrush x:Key="NormalBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#CCC" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="LightBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalLightBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DarkBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#FFF" Offset="0.0"/>
                <GradientStop Color="#AAA" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#BBB" Offset="0.0"/>
                <GradientStop Color="#EEE" Offset="0.1"/>
                <GradientStop Color="#EEE" Offset="0.9"/>
                <GradientStop Color="#FFF" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledForegroundBrush" Color="#888" />

    <SolidColorBrush x:Key="DisabledBackgroundBrush" Color="#EEE" />

    <SolidColorBrush x:Key="WindowBackgroundBrush" Color="#FFF" />

    <SolidColorBrush x:Key="SelectedBackgroundBrush" Color="#DDD" />

    <SolidColorBrush x:Key="NormalForegroundBrush" Color="Black" />
    <!-- Border Brushes -->

    <LinearGradientBrush x:Key="NormalBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="HorizontalNormalBorderBrush" StartPoint="0,0" EndPoint="1,0">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#CCC" Offset="0.0"/>
                <GradientStop Color="#444" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="DefaultedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#777" Offset="0.0"/>
                <GradientStop Color="#000" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <LinearGradientBrush x:Key="PressedBorderBrush" StartPoint="0,0" EndPoint="0,1">
        <GradientBrush.GradientStops>
            <GradientStopCollection>
                <GradientStop Color="#444" Offset="0.0"/>
                <GradientStop Color="#888" Offset="1.0"/>
            </GradientStopCollection>
        </GradientBrush.GradientStops>
    </LinearGradientBrush>

    <SolidColorBrush x:Key="DisabledBorderBrush" Color="#AAA" />

    <SolidColorBrush x:Key="SolidBorderBrush" Color="#888" />

    <SolidColorBrush x:Key="LightBorderBrush" Color="#AAA" />

    <!-- Miscellaneous Brushes -->
    <SolidColorBrush x:Key="GlyphBrush" Color="#FF776B5F" />

    <SolidColorBrush x:Key="LightColorBrush" Color="#DDD" />
	
	<ControlTemplate TargetType="ToggleButton" x:Key="ComboBoxToggleButtonTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="50" />
            </Grid.ColumnDefinitions>
            <Border
          BorderBrush="#FFCAC3BA"
          CornerRadius="2,6,6,2"
          BorderThickness="0,0,0,0"
          Name="Border"
          Grid.ColumnSpan="2" >
            	<Border.Background>
					<ImageBrush ImageSource ="select-btn.png"></ImageBrush>        	
				</Border.Background>
            </Border>
            <Border
          Margin="1,1,1,1"
          BorderBrush="{StaticResource NormalBorderBrush}"
          CornerRadius="2,2,2,2"
          BorderThickness="0,0,0,0"
          Background="#FFFFFFFF"
          Grid.Column="0" />
            <Path
          Margin="0,0,3,0"
          Data="M0,0L4,4 8,0z"
          HorizontalAlignment="Center"
          Fill="{StaticResource GlyphBrush}"
          Name="Arrow"
          VerticalAlignment="Center"
          Width="8"
          Grid.Column="1"
		   />
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                 <Setter Property="Panel.Background" TargetName="Border">
				<Setter.Value>
					<ImageBrush ImageSource ="select-btn-on.png"></ImageBrush>
				</Setter.Value>
				</Setter>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#FFFFFFFF"/>
				<Setter Property="Border.BorderBrush" TargetName="Border" Value="#E87439"/>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="Panel.Background" TargetName="Border" >
                	<Setter.Value>
					<ImageBrush ImageSource ="select-btn.png"></ImageBrush>
				</Setter.Value>
				</Setter>
                <Setter Property="Border.BorderBrush" TargetName="Border" Value="{StaticResource DisabledBorderBrush}"/>
                <Setter Property="TextElement.Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                <Setter Property="Shape.Fill" TargetName="Arrow" Value="#66FFFFFF"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate TargetType="TextBox" x:Key="ComboBoxTextBoxTemplate">
        <Border
        Name="PART_ContentHost"
        Background="AliceBlue"
        Focusable="False"/>
    </ControlTemplate>
	 
	<Style TargetType="{x:Type ComboBoxItem}" x:Key="ComboBoxItemStyle">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="TextElement.Foreground"  Value="{StaticResource NormalForegroundBrush}"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border
              Name="Border"
              SnapsToDevicePixels="True"
              Padding="2,13,2,2">
                        <ContentPresenter
                 Height="37"/>
				
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ComboBoxItem.IsHighlighted" Value="True">
                            <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource CustomBrush1}"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type ComboBox}" x:Key="Comboboxstyle">

        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="{StaticResource NormalForegroundBrush}"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton
                ClickMode="Press"
                Name="ToggleButton"
                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                Focusable="False"
                Grid.Column="2"
                Template="{StaticResource ComboBoxToggleButtonTemplate}" BorderThickness="0"/>
                        <ContentPresenter
                Margin="3,3,23,3"
                HorizontalAlignment="Left"
                Name="ContentSite"
                VerticalAlignment="Center"
                Content="{TemplateBinding ComboBox.SelectionBoxItem}"
				ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                IsHitTestVisible="False" />
                        <TextBox
                Margin="3,3,23,3"
                Visibility="Hidden"
                HorizontalAlignment="Center"
                Name="PART_EditableTextBox"
                Background="Transparent"
                VerticalAlignment="Center"
                Style="{x:Null}"
                IsReadOnly="False"
                Focusable="True"
                xml:space="preserve"
                Template="{StaticResource ComboBoxTextBoxTemplate}"
				BorderThickness="0,0,0,0"
                             />
            <Popup
                Name="Popup"
                Focusable="False"
                AllowsTransparency="True"
                IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                PopupAnimation="Fade" Margin="0,-1,0,0">
              <Grid
                  MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                  MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                  Name="DropDown"
                  SnapsToDevicePixels="True" >
                <Border
                    BorderBrush="#FFE87439"
                    BorderThickness="1,0,1,1"
                    Name="DropDownBorder"
                    Background="{StaticResource WindowBackgroundBrush}" Margin="0,-1,0,0"/>
                <ScrollViewer
                    Margin="4,6,4,6"
                    SnapsToDevicePixels="True">
                  <ItemsPresenter
                      KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="Window.AllowsTransparency" SourceName="Popup" Value="True">
                            <Setter Property="Border.CornerRadius" TargetName="DropDownBorder" Value="0"/>
                            <Setter Property="FrameworkElement.Margin" TargetName="DropDownBorder" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
<Style x:Key="{x:Static GridView.GridViewScrollViewerStyleKey}"
         TargetType="ScrollViewer">
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ScrollViewer">
          <Grid Background="{TemplateBinding Background}">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="*" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <Grid.RowDefinitions>
              <RowDefinition Height="*" />
              <RowDefinition Height="Auto" />
            </Grid.RowDefinitions>

            <DockPanel Margin="{TemplateBinding Padding}">
              <ScrollViewer DockPanel.Dock="Top"
                            HorizontalScrollBarVisibility="Hidden"
                            VerticalScrollBarVisibility="Auto"
                            Focusable="false">
                <GridViewHeaderRowPresenter Margin="0,0,2,0"
                                            Columns="{Binding Path=TemplatedParent.View.Columns,
                  RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderContainerStyle="{Binding
                  Path=TemplatedParent.View.ColumnHeaderContainerStyle,
                  RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderTemplate="{Binding
                  Path=TemplatedParent.View.ColumnHeaderTemplate,
                  RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderTemplateSelector="{Binding 
                  Path=TemplatedParent.View.ColumnHeaderTemplateSelector,
                  RelativeSource={RelativeSource TemplatedParent}}"
                                            AllowsColumnReorder="{Binding
                  Path=TemplatedParent.View.AllowsColumnReorder,
                  RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderContextMenu="{Binding
                  Path=TemplatedParent.View.ColumnHeaderContextMenu,
                  RelativeSource={RelativeSource TemplatedParent}}"
                                            ColumnHeaderToolTip="{Binding
                  Path=TemplatedParent.View.ColumnHeaderToolTip,
                  RelativeSource={RelativeSource TemplatedParent}}"
                                            SnapsToDevicePixels="{TemplateBinding
                  SnapsToDevicePixels}" />
              </ScrollViewer>

              <ScrollContentPresenter Name="PART_ScrollContentPresenter"
                                      KeyboardNavigation.DirectionalNavigation="Local"
                                      CanContentScroll="True"
                                      CanHorizontallyScroll="False"
                                      CanVerticallyScroll="False" />
            </DockPanel>

            <ScrollBar Name="PART_HorizontalScrollBar"
                       Orientation="Horizontal"
                       Grid.Row="1"
                       Maximum="{TemplateBinding ScrollableWidth}"
                       ViewportSize="{TemplateBinding ViewportWidth}"
                       Value="{TemplateBinding HorizontalOffset}"
                       Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />

            <ScrollBar Name="PART_VerticalScrollBar"
                       Grid.Column="1"
                       Maximum="{TemplateBinding ScrollableHeight}"
                       ViewportSize="{TemplateBinding ViewportHeight}"
                       Value="{TemplateBinding VerticalOffset}"
                       Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />

          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="GridViewColumnHeaderGripper"
         TargetType="Thumb">
    <Setter Property="Width"
            Value="2" />
   
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type Thumb}">
          <Border Padding="{TemplateBinding Padding}"
                  Background="Transparent">
            <Rectangle HorizontalAlignment="Center"
                       Width="1"
                       Fill="{TemplateBinding Background}" />
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="BorderBrush">
      <Setter.Value>
        <LinearGradientBrush EndPoint="0.5,1"
                             StartPoint="0.5,0">
          <GradientStop Color="Black"
                        Offset="0" />
          <GradientStop Color="White"
                        Offset="1" />
        </LinearGradientBrush>
      </Setter.Value>
    </Setter>
  </Style>

  <Style x:Key="{x:Type GridViewColumnHeader}"
         TargetType="GridViewColumnHeader">
    <Setter Property="HorizontalContentAlignment"
            Value="Center" />
    <Setter Property="VerticalContentAlignment"
            Value="Center" />
    <Setter Property="Foreground"
            Value="#776b5f" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="GridViewColumnHeader">
          <Grid>
            <VisualStateManager.VisualStateGroups>
              <VisualStateGroup x:Name="CommonStates">
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver">
                  <Storyboard>
                    <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Panel.Background).
                      (GradientBrush.GradientStops)[1].(GradientStop.Color)"
                                                  Storyboard.TargetName="HeaderBorder">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="#FFEDE5DA" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="Pressed" />
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <Border x:Name="HeaderBorder"
                    BorderThickness="0,0,0,0"
                    Padding="0,0,0,0">

              <Border.Background>

                <LinearGradientBrush StartPoint="0,0"
                                     EndPoint="0,1">
                  <LinearGradientBrush.GradientStops>
                    <GradientStopCollection>
                      <GradientStop Color="#FFEDE5DA"
                                    Offset="0.0" />
                      <GradientStop Color="#FFEDE5DA"
                                    Offset="1.0" />
                    </GradientStopCollection>
                  </LinearGradientBrush.GradientStops>
                </LinearGradientBrush>

              </Border.Background>
              <ContentPresenter x:Name="HeaderContent"
                                Margin="0,0,0,0"
                                RecognizesAccessKey="True"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
            </Border>
            <Thumb x:Name="PART_HeaderGripper"
                   HorizontalAlignment="Right"
                   Margin="0,0,0,0"
                   Style="{StaticResource GridViewColumnHeaderGripper}" />
          </Grid>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FontSize" Value="14"/>
    <Setter Property="FontFamily" Value="SimSun"/>
    <Setter Property="Background">
    	<Setter.Value>
    		<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
    			<GradientStop Color="#FFEDE5DA" Offset="0"/>
    			<GradientStop Color="#FFEDE5DA" Offset="0.5"/>
    			<GradientStop Color="#FFEDE5DA" Offset="1"/>
    		</LinearGradientBrush>
    	</Setter.Value>
    </Setter>
    <Style.Triggers>
      <Trigger Property="Role"
               Value="Floating">
        <Setter Property="Opacity"
                Value="0.7" />
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="GridViewColumnHeader">
              <Canvas Name="PART_FloatingHeaderCanvas">
                <Rectangle Fill="#60000000"
                           Width="{TemplateBinding ActualWidth}"
                           Height="{TemplateBinding ActualHeight}" />
              </Canvas>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
      <Trigger Property="Role"
               Value="Padding">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="GridViewColumnHeader">
              <Border Name="HeaderBorder"
                      BorderThickness="0,0,0,0">
                <Border.Background>
                  <SolidColorBrush Color="#FFede5da" />
                </Border.Background>
                <Border.BorderBrush>
                  <SolidColorBrush Color="#FFE5D6A6"></SolidColorBrush>
                </Border.BorderBrush>
              </Border>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </Trigger>
    </Style.Triggers>
  </Style>

    
    
    
    
    
  <Style x:Key="ListViewStyle"
         TargetType="ListView">
    <Setter Property="SnapsToDevicePixels"
            Value="true" />
    <Setter Property="OverridesDefaultStyle"
            Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
            Value="Hidden" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
            Value="Hidden" />
    <Setter Property="ScrollViewer.CanContentScroll"
            Value="true" />
    <Setter Property="VerticalContentAlignment"
            Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListView">
          <Border Name="Border"
                  BorderThickness="1,1,1,1" Background="#FFFCF5EB" BorderBrush="#FF776B5F">
            <ScrollViewer Style="{DynamicResource
                          {x:Static GridView.GridViewScrollViewerStyleKey}}">
              <ItemsPresenter />
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsGrouping"
                     Value="true">
              <Setter Property="ScrollViewer.CanContentScroll"
                      Value="false" />
            </Trigger>
            
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FontSize" Value="9"/>
    <Setter Property="FontFamily" Value="SimSun"/>
    <Setter Property="Foreground" Value="#FF776B5F"/>
    <Setter Property="Background" Value="#FFFCF5EB"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
  </Style>

<Style x:Key="ListViewStyleLeft"
         TargetType="ListView">
    <Setter Property="SnapsToDevicePixels"
            Value="true" />
    <Setter Property="OverridesDefaultStyle"
            Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
            Value="Hidden" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
            Value="Hidden" />
    <Setter Property="ScrollViewer.CanContentScroll"
            Value="true" />
    <Setter Property="VerticalContentAlignment"
            Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListView">
          <Border Name="Border"
                  BorderThickness="1,1,1,1" Background="#FFFCF5EB" BorderBrush="#FF776B5F">
            <ScrollViewer Style="{DynamicResource
                          {x:Static GridView.GridViewScrollViewerStyleKey}}">
              <ItemsPresenter />
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsGrouping"
                     Value="true">
              <Setter Property="ScrollViewer.CanContentScroll"
                      Value="false" />
            </Trigger>
            
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FontSize" Value="9"/>
    <Setter Property="FontFamily" Value="SimSun"/>
    <Setter Property="Foreground" Value="#FF776B5F"/>
    <Setter Property="Background" Value="#FFFCF5EB"/>
    <Setter Property="HorizontalContentAlignment" Value="Left"/>
  </Style>


    <Style TargetType="DataGrid">
        <!--网格线颜色-->
        <Setter Property="CanUserResizeColumns" Value="false"/>
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderBrush" Value="#d6c79b" />
        <Setter Property="HorizontalGridLinesBrush">
            <Setter.Value>
                <SolidColorBrush Color="#d6c79b"/>
            </Setter.Value>
        </Setter>
        <Setter Property="VerticalGridLinesBrush">
            <Setter.Value>
                <SolidColorBrush Color="#d6c79b"/>
            </Setter.Value>
        </Setter>
    </Style>

    <!--标题栏样式-->
    <!--<Style  TargetType="DataGridColumnHeader" >
        <Setter Property="Width" Value="50"/>
        <Setter Property="Height" Value="30"/>
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Background" Value="White" />
        <Setter  Property="FontWeight"  Value="Bold"/>
    </Style>-->

    <Style TargetType="DataGridColumnHeader">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="MinWidth" Value="0" />
        <Setter Property="MinHeight" Value="28" />
        <Setter Property="Foreground" Value="#323433" />
        <Setter Property="FontSize" Value="14" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridColumnHeader">
                    <Border x:Name="BackgroundBorder" BorderThickness="0,1,0,1"
                             BorderBrush="#e6dbba"
                              Width="Auto">
                        <Grid >
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter  Margin="0,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            <Path x:Name="SortArrow" Visibility="Collapsed" Data="M0,0 L1,0 0.5,1 z" Stretch="Fill"  Grid.Column="2" Width="8" Height="6" Fill="White" Margin="0,0,50,0"
                            VerticalAlignment="Center" RenderTransformOrigin="1,1" />
                            <Rectangle Width="1" Fill="#d6c79b" HorizontalAlignment="Right" Grid.ColumnSpan="1" />
                            <!--<TextBlock  Background="Red">
                            <ContentPresenter></ContentPresenter></TextBlock>-->
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Height" Value="25"/>
    </Style>
    <!--行样式触发-->
    <!--背景色改变必须先设置cellStyle 因为cellStyle会覆盖rowStyle样式-->
    <Style  TargetType="DataGridRow">
        <Setter Property="Background" Value="#F2F2F2" />
        <Setter Property="Height" Value="25"/>
        <Setter Property="Foreground" Value="Black" />
        <Style.Triggers>
            <!--隔行换色-->
            <Trigger Property="AlternationIndex" Value="0" >
                <Setter Property="Background" Value="#e7e7e7" />
            </Trigger>
            <Trigger Property="AlternationIndex" Value="1" >
                <Setter Property="Background" Value="#f2f2f2" />
            </Trigger>

            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="LightGray"/>
                <!--<Setter Property="Foreground" Value="White"/>-->
            </Trigger>

            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--单元格样式触发-->
    <Style TargetType="DataGridCell">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DataGridCell">
                    <TextBlock TextAlignment="Center" VerticalAlignment="Center"  >
                           <ContentPresenter />
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <!--<Setter Property="Background" Value="White"/>
                <Setter Property="BorderThickness" Value="0"/>-->
                <Setter Property="Foreground" Value="Black"/>
            </Trigger>
        </Style.Triggers>
    </Style>

































    <Style x:Key="CustomerItemStyle"
         TargetType="ListViewItem">
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ItemsControl.AlternationIndex" Value="1" />
                    <Condition Property="IsSelected" Value="False" />
                    <Condition Property="IsMouseOver" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="Red" />
            </MultiTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="ListViewItemStyle"
         TargetType="ListViewItem">
    <Setter Property="SnapsToDevicePixels"
            Value="true" />
    <Setter Property="OverridesDefaultStyle"
            Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBoxItem">
                   
                        <Border x:Name="Border"
                  Padding="0,0,0,0"
             
				  Margin="0,0,0,0"
                  Background="#FFFCF5EB" BorderThickness="0,0,0,1" BorderBrush="#FF776B5F" Height="38">
                       
            <VisualStateManager.VisualStateGroups>
            	
              <VisualStateGroup x:Name="CommonStates">
                                
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="Selected">
                  <Storyboard>

                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="(Panel.Background).
                      (SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="#FFFFEFBD" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="SelectedUnfocused">
                  <Storyboard>
                      
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="(Panel.Background).
                      (SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="#FFFCF5EB" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <GridViewRowPresenter  VerticalAlignment="Center" HorizontalAlignment="Center" />

                    </Border>    
                </ControlTemplate>
      </Setter.Value>
    </Setter>
	<Setter Property="VerticalContentAlignment" Value="Center"/>
	<Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Foreground" Value="#FF776B5F"/>
    <Setter Property="FontSize" Value="14"/>
    <Setter Property="FontFamily" Value="SimSun"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="BorderBrush" Value="#FFE5D6A6"/>
    <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
    <Setter Property="Background" Value="#FFFFEFBD"/>
  </Style>
  
  <Style x:Key="ListViewItemStyleLeft"
         TargetType="ListViewItem">
    <Setter Property="SnapsToDevicePixels"
            Value="true" />
    <Setter Property="OverridesDefaultStyle"
            Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBoxItem">
                   
                        <Border x:Name="Border"
                  Padding="0,0,0,0"
             
				  Margin="0,0,0,0"
                  Background="#FFFCF5EB" BorderThickness="0,0,0,1" BorderBrush="#FF776B5F" Height="38">
                       
            <VisualStateManager.VisualStateGroups>
            	
              <VisualStateGroup x:Name="CommonStates">
                                
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="Selected">
                  <Storyboard>

                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="(Panel.Background).
                      (SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="#FFFFEFBD" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="SelectedUnfocused">
                  <Storyboard>
                      
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="(Panel.Background).
                      (SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="#FFFCF5EB" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <GridViewRowPresenter  VerticalAlignment="Center" HorizontalAlignment="Center" />

                    </Border>    
                </ControlTemplate>
      </Setter.Value>
    </Setter>
	<Setter Property="VerticalContentAlignment" Value="Center"/>
	<Setter Property="HorizontalContentAlignment" Value="Left"/>
    <Setter Property="Foreground" Value="#FF776B5F"/>
    <Setter Property="FontSize" Value="9"/>
    <Setter Property="FontFamily" Value="SimSun"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="BorderBrush" Value="#FFE5D6A6"/>
    <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
    <Setter Property="Background" Value="#FFFFEFBD"/>
  </Style>
  
  <Style x:Key="ListViewStyleOther"
         TargetType="ListView">
    <Setter Property="SnapsToDevicePixels"
            Value="true" />
    <Setter Property="OverridesDefaultStyle"
            Value="true" />
    <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
            Value="Auto" />
    <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
            Value="Auto" />
    <Setter Property="ScrollViewer.CanContentScroll"
            Value="true" />
    <Setter Property="VerticalContentAlignment"
            Value="Center" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListView">
          <Border Name="Border"
                  BorderThickness="1,1,1,1" Background="#FFFFEFBD" BorderBrush="#FF776B5F">
            <ScrollViewer Style="{DynamicResource
                          {x:Static GridView.GridViewScrollViewerStyleKey}}">
              <ItemsPresenter />
            </ScrollViewer>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsGrouping"
                     Value="true">
              <Setter Property="ScrollViewer.CanContentScroll"
                      Value="false" />
            </Trigger>
            
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="FontSize" Value="14"/>
    <Setter Property="FontFamily" Value="SimSun"/>
    <Setter Property="Foreground" Value="#FF776B5F"/>
    <Setter Property="Background" Value="#FFFCF5EB"/>
    <Setter Property="HorizontalContentAlignment" Value="Center"/>
  </Style>

  
  <Style x:Key="ListViewItemStyleOther"
         TargetType="ListViewItem">
    <Setter Property="SnapsToDevicePixels"
            Value="true" />
    <Setter Property="OverridesDefaultStyle"
            Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBoxItem">
                   
                        <Border x:Name="Border"
                  Padding="0,0,0,0"
             
				  Margin="0,0,0,0"
                  Background="#FFFFEFBD" BorderThickness="0,0,0,1" BorderBrush="#FF776B5F" Height="38">
                       
            <VisualStateManager.VisualStateGroups>
            	
              <VisualStateGroup x:Name="CommonStates">
                                
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="Selected">
                  <Storyboard>

                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="(Panel.Background).
                      (SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="#FFFFEFBD" />
                    </ColorAnimationUsingKeyFrames>
					
					
					
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="SelectedUnfocused">
                  <Storyboard>
                      
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="(Panel.Background).
                      (SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="#FFFFEFBD" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <GridViewRowPresenter  VerticalAlignment="Center" HorizontalAlignment="Center" />

                    </Border>
        	
                </ControlTemplate>
      </Setter.Value>
    </Setter>
	<Setter Property="VerticalContentAlignment" Value="Center"/>
	<Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Foreground" Value="#FF776B5F"/>
    <Setter Property="FontSize" Value="14"/>
    <Setter Property="FontFamily" Value="SimSun"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="BorderBrush" Value="#FFE5D6A6"/>
    <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
  </Style>
  
  <Style x:Key="ListViewItemStyleBIG"
         TargetType="ListViewItem">
    <Setter Property="SnapsToDevicePixels"
            Value="true" />
    <Setter Property="OverridesDefaultStyle"
            Value="true" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="ListBoxItem">
                   
                        <Border x:Name="Border"
                  Padding="0,0,0,0"
             
				  Margin="0,0,0,0"
                  Background="#FFFCF5EB" BorderThickness="0,0,0,1" BorderBrush="#FF776B5F" Height="38">
                       
            <VisualStateManager.VisualStateGroups>
            	
              <VisualStateGroup x:Name="CommonStates">
                                
                <VisualState x:Name="Normal" />
                <VisualState x:Name="MouseOver" />
                <VisualState x:Name="Disabled" />
              </VisualStateGroup>
              <VisualStateGroup x:Name="SelectionStates">
                <VisualState x:Name="Unselected" />
                <VisualState x:Name="Selected">
                  <Storyboard>

                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="(Panel.Background).
                      (SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="#FFFFEFBD" />
                    </ColorAnimationUsingKeyFrames>
					
					
					
                  </Storyboard>
                </VisualState>
                <VisualState x:Name="SelectedUnfocused">
                  <Storyboard>
                      
                    <ColorAnimationUsingKeyFrames Storyboard.TargetName="Border"
                                                  Storyboard.TargetProperty="(Panel.Background).
                      (SolidColorBrush.Color)">
                      <EasingColorKeyFrame KeyTime="0"
                                           Value="#FFFFEFBD" />
                    </ColorAnimationUsingKeyFrames>
                  </Storyboard>
                </VisualState>
              </VisualStateGroup>
            </VisualStateManager.VisualStateGroups>
            <GridViewRowPresenter  VerticalAlignment="Center" HorizontalAlignment="Center" />

                    </Border>
        	<ControlTemplate.Triggers>
        		<Trigger Property="Selector.IsSelected" Value="True">
        			<Setter Property="Height" TargetName="Border" Value="50"/>
        		</Trigger>
        	</ControlTemplate.Triggers>    
                </ControlTemplate>
      </Setter.Value>
    </Setter>
	<Setter Property="VerticalContentAlignment" Value="Center"/>
	<Setter Property="HorizontalContentAlignment" Value="Center"/>
    <Setter Property="Foreground" Value="#FF776B5F"/>
    <Setter Property="FontSize" Value="14"/>
    <Setter Property="FontFamily" Value="SimSun"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="BorderBrush" Value="#FFE5D6A6"/>
    <Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
  </Style>
	<Style TargetType="{x:Type TabItem}" x:Key="TabTemplStyle">
		<Style.Triggers>
			<Trigger Property="Selector.IsSelected" Value="False">
				<Setter Property="Foreground" Value="#FF776B5F"/>
			</Trigger>
			<Trigger Property="Selector.IsSelected" Value="True">
				<Setter Property="Foreground" Value="#FFEEE7DE"/>
			</Trigger>
		</Style.Triggers>
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TabItem}">
						<Grid>
							<Border Name="Border" Background="LightBlue" BorderBrush="#FFC5C1BE" BorderThickness="0,0,0,0" CornerRadius="3,3,0,0">
								<ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="12,2,12,2" />
							</Border>
						</Grid>
						<ControlTemplate.Triggers>
							<Trigger Property="IsSelected" Value="True">
								<Setter TargetName="Border" Property="Background"  Value="#ffffff" >
								<!--<Setter.Value>
										<ImageBrush ImageSource="gray-tab80-active.png"></ImageBrush>
								</Setter.Value>-->
								</Setter>
								<Setter TargetName="Border" Property="BorderBrush" Value="#FFE87439" />
							</Trigger>
							<Trigger Property="IsSelected" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="#E3F6F0">
								<!--<Setter.Value>
										<ImageBrush ImageSource="gray-tab80.png"></ImageBrush>
								</Setter.Value>-->
								</Setter>
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
			<Setter Property="FocusVisualStyle" Value="{DynamicResource buttonFocusVisual}"/>
			<Setter Property="Height" Value="40"/>
		</Style>
	
	<Style TargetType="{x:Type TabControl}" x:Key="TabControlStyle">
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type TabControl}">
						<Grid>
							<Grid.RowDefinitions>
								<RowDefinition Height="Auto"/>
								<RowDefinition Height="*"/>
							</Grid.RowDefinitions>
							<TabPanel Grid.Row="0" Panel.ZIndex="1" Margin="0,0,0,-1" IsItemsHost="True" Background="Transparent"/>
							<Border Grid.Row="1" BorderBrush="#FFCAC3BA" BorderThickness="1"  CornerRadius="0,3,3,3" Background="#FFFFFFFF">
								<ContentPresenter ContentSource="SelectedContent" />
							</Border>
						</Grid>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
    <!--关闭按钮-->
	<Style x:Key="ColsedButtonStyle" TargetType="{x:Type Button}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type Button}">
					<Grid>
						<Rectangle Stroke="Black" StrokeThickness="0">
							<Rectangle.Fill>
								<ImageBrush ImageSource="closed-btn.png"/>
							</Rectangle.Fill>
						</Rectangle>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content=""/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True"/>
						<Trigger Property="IsDefaulted" Value="True"/>
						<Trigger Property="IsMouseOver" Value="True"/>
						<Trigger Property="IsPressed" Value="True"/>
						<Trigger Property="IsEnabled" Value="False"/>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="BorderThickness" Value="0"/>
	</Style>
	<Style x:Key="TextBoxStyle" TargetType="{x:Type TextBox}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type TextBox}">
					<Grid Height="50">
						<Rectangle Fill="#FFF4F4F5" Stroke="Black" RadiusX="2" RadiusY="2" Height="28" StrokeThickness="0"/>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True"/>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
    
	 <!--combobox-->
		<ControlTemplate TargetType="ToggleButton" x:Key="singleComboBoxToggleButtonTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition />
                <ColumnDefinition Width="50" />
            </Grid.ColumnDefinitions>
            <Border
          BorderBrush="#FFCAC3BA"
          CornerRadius="2,6,6,2"
          BorderThickness="0,0,0,0"
          Name="Border"
          Grid.ColumnSpan="2" >
            	<Border.Background>
					<ImageBrush ImageSource ="delivery-select.png"></ImageBrush>        	
				</Border.Background>
            </Border>
            <Border
          Margin="0,1"
          BorderBrush="{StaticResource NormalBorderBrush}"
          CornerRadius="2,2,2,2"
          BorderThickness="0,0,0,0"
          Background="#FFFFFFFF"
          Grid.Column="0" HorizontalAlignment="Left" RenderTransformOrigin="0.5,0.5" Width="0" >
            	<Border.RenderTransform>
            		<TransformGroup>
            			<ScaleTransform ScaleX="-1"/>
            			<SkewTransform/>
            			<RotateTransform/>
            			<TranslateTransform/>
            		</TransformGroup>
            	</Border.RenderTransform>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                 <Setter Property="Panel.Background" TargetName="Border">
				<Setter.Value>
					<ImageBrush ImageSource ="select-btn-on.png"></ImageBrush>
				</Setter.Value>
				</Setter>
				<Setter Property="Border.BorderBrush" TargetName="Border" Value="#E87439"/>
				<Setter Property="Background" TargetName="Border">
					<Setter.Value>
						<ImageBrush ImageSource="delivery-select-active.png"/>
					</Setter.Value>
				</Setter>
            </Trigger>
            <Trigger Property="UIElement.IsEnabled" Value="False">
                <Setter Property="Panel.Background" TargetName="Border" Value="{StaticResource DisabledBackgroundBrush}"/>
                <Setter Property="Border.BorderBrush" TargetName="Border" Value="{StaticResource DisabledBorderBrush}"/>
                <Setter Property="TextElement.Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
	<Style TargetType="{x:Type ComboBox}" x:Key="SingleComboboxstyle">

        <Setter Property="UIElement.SnapsToDevicePixels" Value="True"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="True"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"/>
        <Setter Property="TextElement.Foreground" Value="{StaticResource NormalForegroundBrush}"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid>
                        <ToggleButton
                ClickMode="Press"
                Name="ToggleButton"
                IsChecked="{Binding Path=IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}"
                Focusable="False"
                Grid.Column="2"
                Template="{StaticResource singleComboBoxToggleButtonTemplate}" BorderThickness="0"/>
                        <ContentPresenter
                Margin="3,3,23,3"
                HorizontalAlignment="Left"
                Name="ContentSite"
                VerticalAlignment="Center"
                Content="{TemplateBinding ComboBox.SelectionBoxItem}"
				ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                IsHitTestVisible="False" />
                        <TextBox
                Margin="3,3,23,3"
                Visibility="Hidden"
                HorizontalAlignment="Center"
                Name="PART_EditableTextBox"
                Background="Transparent"
                VerticalAlignment="Center"
                Style="{x:Null}"
                IsReadOnly="False"
                Focusable="True"
                xml:space="preserve"
                Template="{StaticResource ComboBoxTextBoxTemplate}"
				BorderThickness="0,0,0,0"
                             />
            <Popup
                Name="Popup"
                Focusable="False"
                AllowsTransparency="True"
                IsOpen="{TemplateBinding ComboBox.IsDropDownOpen}"
                PopupAnimation="Fade" Margin="0,-1,0,0">
              <Grid
                  MinWidth="{TemplateBinding FrameworkElement.ActualWidth}"
                  MaxHeight="{TemplateBinding ComboBox.MaxDropDownHeight}"
                  Name="DropDown"
                  SnapsToDevicePixels="True" >
                <Border
                    BorderBrush="#FFE87439"
                    BorderThickness="1,0,1,1"
                    Name="DropDownBorder"
                    Background="{StaticResource WindowBackgroundBrush}" Margin="0,-1,0,0"/>
                <ScrollViewer
                    Margin="4,6,4,6"
                    SnapsToDevicePixels="True">
                  <ItemsPresenter
                      KeyboardNavigation.DirectionalNavigation="Contained" />
                </ScrollViewer>
              </Grid>
            </Popup>
          </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ItemsControl.HasItems" Value="False">
                            <Setter Property="FrameworkElement.MinHeight" TargetName="DropDownBorder" Value="95"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" Value="{StaticResource DisabledForegroundBrush}"/>
                        </Trigger>
                        <Trigger Property="ItemsControl.IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                        </Trigger>
                        <Trigger Property="Window.AllowsTransparency" SourceName="Popup" Value="True">
                            <Setter Property="Border.CornerRadius" TargetName="DropDownBorder" Value="0"/>
                            <Setter Property="FrameworkElement.Margin" TargetName="DropDownBorder" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="ComboBox.IsEditable" Value="True">
                            <Setter Property="KeyboardNavigation.IsTabStop" Value="False"/>
                            <Setter Property="UIElement.Visibility" TargetName="PART_EditableTextBox" Value="Visible"/>
                            <Setter Property="UIElement.Visibility" TargetName="ContentSite" Value="Hidden"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--点菜-->
    <Style x:Key="DishesButtonStyle" TargetType="{x:Type Button}">
    	<Style.Triggers>
    		<Trigger Property="IsFocused" Value="True">
    			<Setter Property="BorderBrush" Value="#FFF07118"/>
    		</Trigger>
    	</Style.Triggers>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Rectangle x:Name="rectangle" Stroke="#FFCAC3BA" StrokeThickness="0" Fill="Transparent"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content=""/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True"/>
                        <Trigger Property="IsDefaulted" Value="True"/>
                        <Trigger Property="IsMouseOver" Value="True"/>
                        <Trigger Property="IsPressed" Value="True">
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

   <!--菜单-->
    
    <Style x:Key="Menu"
         TargetType="{x:Type Menu}">
        <Setter Property="OverridesDefaultStyle"
            Value="True" />
        <Setter Property="SnapsToDevicePixels"
            Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Menu}">
                    <Border BorderThickness="1">
                        <Border.BorderBrush>
                            <LinearGradientBrush StartPoint="0,0"
                                   EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStopCollection>
                                        <GradientStop Color="#00E87439"
                                  Offset="0.0" />
                                        <GradientStop Color="#00E87439"
                                  Offset="1.0" />
                                    </GradientStopCollection>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>

                        </Border.BorderBrush>
                        <Border.Background>
                            <LinearGradientBrush EndPoint="0.5,1"
                                   StartPoint="0.5,0">
                                <GradientStop Color="#00E87439"
                              Offset="0" />
                                <GradientStop Color="#00E87439"
                              Offset="1" />
                            </LinearGradientBrush>
                        </Border.Background>
                        <StackPanel ClipToBounds="True"
                        Orientation="Horizontal"
                        IsItemsHost="True" />
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="SimSun"/>
        <Setter Property="Foreground" Value="#FFEEE7DE"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>
    <!--</SnippetMenu>-->

    <!--<SnippetContextMenu>-->
    <Style TargetType="{x:Type ContextMenu}" x:Key="ContextMenu">
    	<Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="SimSun"/>
        <Setter Property="Foreground" Value="#FF776b5f"/>
        <Setter Property="SnapsToDevicePixels"
            Value="True" />
        <Setter Property="OverridesDefaultStyle"
            Value="True" />
        <Setter Property="Grid.IsSharedSizeScope"
            Value="true" />
        <Setter Property="HasDropShadow"
            Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Border x:Name="Border"
                  Background="#FFFFFFFF"
                  BorderThickness="1">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="#FFCAC3BA" />
                        </Border.BorderBrush>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasDropShadow"
                     Value="true">
                            <Setter TargetName="Border"
                      Property="Padding"
                      Value="0,3,0,3" />
                            <Setter TargetName="Border"
                      Property="CornerRadius"
                      Value="0" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--</SnippetContextMenu>-->

    <MenuScrollingVisibilityConverter x:Key="MenuScrollingVisibilityConverter" />
    <Geometry x:Key="DownArrow">M 0,0 L 3.5,4 L 7,0 Z</Geometry>
    <Geometry x:Key="UpArrow">M 0,4 L 3.5,0 L 7,4 Z</Geometry>
    <Geometry x:Key="RightArrow">M 0,0 L 4,3.5 L 0,7 Z</Geometry>

    <Style x:Key="MenuScrollButton"
         TargetType="{x:Type RepeatButton}"
         BasedOn="{x:Null}">
        <Setter Property="ClickMode"
            Value="Hover" />
        <Setter Property="MinWidth"
            Value="0" />
        <Setter Property="MinHeight"
            Value="0" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <DockPanel Background="Transparent"
                     SnapsToDevicePixels="true">
                        <Rectangle DockPanel.Dock="Right"
                       x:Name="R1"
                       Width="1"
                       Fill="Transparent" />
                        <Rectangle DockPanel.Dock="Bottom"
                       x:Name="B1"
                       Height="1"
                       Fill="Transparent" />
                        <Rectangle DockPanel.Dock="Left"
                       x:Name="L1"
                       Width="1"
                       Fill="Transparent" />
                        <Rectangle DockPanel.Dock="Top"
                       x:Name="T1"
                       Height="1"
                       Fill="Transparent" />
                        <ContentPresenter x:Name="ContentContainer"
                              Margin="2,2,2,2"
                              VerticalAlignment="Center"
                              HorizontalAlignment="Center" />
                    </DockPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed"
                     Value="true">
                            <Setter TargetName="R1"
                      Property="Fill"
                      Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                            <Setter TargetName="B1"
                      Property="Fill"
                      Value="{DynamicResource {x:Static SystemColors.ControlLightLightBrushKey}}" />
                            <Setter TargetName="L1"
                      Property="Fill"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                            <Setter TargetName="T1"
                      Property="Fill"
                      Value="{DynamicResource {x:Static SystemColors.ControlDarkDarkBrushKey}}" />
                            <Setter TargetName="ContentContainer"
                      Property="Margin"
                      Value="3,3,1,1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ScrollViewer for a MenuItem-->
    <Style x:Key="MenuScrollViewer"
         TargetType="{x:Type ScrollViewer}"
         BasedOn="{x:Null}">
        <Setter Property="HorizontalScrollBarVisibility"
            Value="Hidden" />
        <Setter Property="VerticalScrollBarVisibility"
            Value="Auto" />
        <Setter Property="Template">
            <Setter.Value>
                <!--<SnippetMenuScrollViewer>-->
                <!--ScrollViewer for a MenuItem-->
                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                    <Grid SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="*" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Border Grid.Row="1"
                    Grid.Column="0">
                            <ScrollContentPresenter Margin="{TemplateBinding Padding}" />
                        </Border>
                        <RepeatButton Style="{StaticResource MenuScrollButton}"
                          Grid.Row="0"
                          Grid.Column="0"
                          Command="{x:Static ScrollBar.LineUpCommand}"
                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                          Focusable="False">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed"
                              Converter="{StaticResource MenuScrollingVisibilityConverter}"
                              ConverterParameter="0">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="ComputedVerticalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="VerticalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="ExtentHeight" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="ViewportHeight" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                    Data="{StaticResource UpArrow}" />
                        </RepeatButton>
                        <RepeatButton Style="{StaticResource MenuScrollButton}"
                          Grid.Row="2"
                          Grid.Column="0"
                          Command="{x:Static ScrollBar.LineDownCommand}"
                          CommandTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                          Focusable="False">
                            <RepeatButton.Visibility>
                                <MultiBinding FallbackValue="Visibility.Collapsed"
                              Converter="{StaticResource MenuScrollingVisibilityConverter}"
                              ConverterParameter="100">
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="ComputedVerticalScrollBarVisibility" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="VerticalOffset" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="ExtentHeight" />
                                    <Binding RelativeSource="{RelativeSource TemplatedParent}"
                           Path="ViewportHeight" />
                                </MultiBinding>
                            </RepeatButton.Visibility>
                            <Path Fill="{DynamicResource {x:Static SystemColors.MenuTextBrushKey}}"
                    Data="{StaticResource DownArrow}" />
                        </RepeatButton>
                    </Grid>
                </ControlTemplate>
                <!--</SnippetMenuScrollViewer>-->
            </Setter.Value>
        </Setter>
    </Style>

    <!--<SnippetMenuItem>-->
    <!--<Snippet9>-->
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}"
         TargetType="{x:Type Separator}">
        <Setter Property="Height"
            Value="1" />
        <Setter Property="Margin"
            Value="0,4,0,4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border BorderThickness="1">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="Red" />
                        </Border.BorderBrush>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--</Snippet9>-->

    <!-- TopLevelHeader -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelHeaderTemplateKey}"
                   TargetType="{x:Type MenuItem}">
        <Border x:Name="Border" Width="140" Height="50">
        	<Border.Background>
        		<ImageBrush ImageSource="select.png"/>
        	</Border.Background>
            <Grid>
                <ContentPresenter Margin="15,3,6,3"
                          ContentSource="Header"
                          RecognizesAccessKey="True" HorizontalAlignment="Left" VerticalAlignment="Center" />
                <Popup x:Name="Popup"
               Placement="Bottom"
               IsOpen="{TemplateBinding IsSubmenuOpen}"
               AllowsTransparency="True"
               Focusable="False"
               PopupAnimation="Fade">
                    <Border x:Name="SubmenuBorder"
                  SnapsToDevicePixels="True"
                  BorderThickness="1"
                  Background="#ffffff">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="#e87439" />
                        </Border.BorderBrush>
                        <ScrollViewer CanContentScroll="True"
                          Style="{StaticResource MenuScrollViewer}">
                            <StackPanel IsItemsHost="True"
                          KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsSuspendingPopupAnimation"
               Value="true">
                <Setter TargetName="Popup"
                Property="PopupAnimation"
                Value="None" />
            </Trigger>
            <Trigger Property="IsHighlighted"
               Value="true">
                <Setter TargetName="Border"
                Property="BorderBrush"
                Value="#e87439" />
                <Setter Property="Background" TargetName="Border">
                	<Setter.Value>
                		<ImageBrush ImageSource="select-on.png"/>
                	</Setter.Value>
                </Setter>
            </Trigger>
            <!--<SnippetTriggerSourceName>-->
            <Trigger SourceName="Popup"
               Property="AllowsTransparency"
               Value="True">
                <Setter TargetName="SubmenuBorder"
                Property="CornerRadius"
                Value="0,0,0,0" />
                <Setter TargetName="SubmenuBorder"
                Property="Padding"
                Value="0,0,0,0" />
            </Trigger>
            <!--</SnippetTriggerSourceName>-->
            <Trigger Property="IsEnabled"
               Value="False">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="#776b5f" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- TopLevelItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.TopLevelItemTemplateKey}"
                   TargetType="{x:Type MenuItem}">
        <Border x:Name="Border">
            <Grid>
                <ContentPresenter Margin="50,21,0,0"
                          ContentSource="Header"
                          RecognizesAccessKey="True" HorizontalAlignment="Left" VerticalAlignment="Top" Height="Auto" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsHighlighted"
               Value="true">
                <Setter Property="Background"
                TargetName="Border">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0"
                                 EndPoint="0,1">
                            <LinearGradientBrush.GradientStops>
                                <GradientStopCollection>
                                    <GradientStop Color="#f7f0e7" />
                                    <GradientStop Color="#f7f0e7"
                                Offset="1.0" />
                                </GradientStopCollection>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>

                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled"
               Value="False">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="#776b5f" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- SubmenuItem -->
    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuItemTemplateKey}"
                   TargetType="{x:Type MenuItem}">
        <Border x:Name="Border"
            BorderThickness="0,0,0,1">
        	<Border.BorderBrush>
        		<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
        			<GradientStop Color="#00000000" Offset="0"/>
        			<GradientStop Color="#FFCAC3BA" Offset="1"/>
        		</LinearGradientBrush>
        	</Border.BorderBrush>
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"
                            SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto"
                            SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                          Margin="6,0,6,0"
                          VerticalAlignment="Center"
                          ContentSource="Icon" />
                <Border x:Name="Check"
                Width="13"
                Height="13"
                Visibility="Collapsed"
                Margin="6,0,6,0"
                BorderThickness="1">
                    <Border.BorderBrush>
                        <LinearGradientBrush StartPoint="0,0"
                                 EndPoint="0,1">
                            <LinearGradientBrush.GradientStops>
                                <GradientStopCollection>
                                    <GradientStop Color="#fff7f0e7"
                                Offset="0.0" />
                                    <GradientStop Color="#fff7f0e7"
                                Offset="1.0" />
                                </GradientStopCollection>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>

                    </Border.BorderBrush>
                    <Border.Background>
                        <LinearGradientBrush StartPoint="0,0"
                                 EndPoint="0,1">
                            <LinearGradientBrush.GradientStops>
                                <GradientStopCollection>
                                    <GradientStop Color="#e87439" />
                                    <GradientStop Color="#e87439"
                                Offset="1.0" />
                                </GradientStopCollection>
                            </LinearGradientBrush.GradientStops>
                        </LinearGradientBrush>
                    </Border.Background>
                    <Path x:Name="CheckMark"
                Width="7"
                Height="7"
                Visibility="Hidden"
                SnapsToDevicePixels="False"
                StrokeThickness="2"
                Data="M 0 0 L 7 7 M 0 7 L 7 0">
                        <Path.Stroke>
                            <SolidColorBrush Color="Transparent" />
                        </Path.Stroke>
                    </Path>
                </Border>
                <ContentPresenter x:Name="HeaderHost"
                          Grid.Column="1"
                          ContentSource="Header"
                          RecognizesAccessKey="True"  VerticalAlignment="Center" />
                <TextBlock x:Name="InputGestureText"
                   Grid.Column="2"
                   Text="{TemplateBinding InputGestureText}"
                   Margin="5,5,0,0"
                   DockPanel.Dock="Right" HorizontalAlignment="Center" VerticalAlignment="Center" />
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="ButtonBase.Command"
               Value="{x:Null}" />
            <Trigger Property="Icon"
               Value="{x:Null}">
                <Setter TargetName="Icon"
                Property="Visibility"
                Value="Hidden" />
            </Trigger>
            <Trigger Property="IsChecked"
               Value="true">
                <Setter TargetName="CheckMark"
                Property="Visibility"
                Value="Visible" />
            </Trigger>
            <Trigger Property="IsCheckable"
               Value="true">
                <Setter TargetName="Check"
                Property="Visibility"
                Value="Visible" />
                <Setter TargetName="Icon"
                Property="Visibility"
                Value="Hidden" />
            </Trigger>
            <Trigger Property="IsHighlighted"
               Value="true">
                <Setter Property="Background"
                TargetName="Border">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1"
                                 StartPoint="0.5,0">
                            <GradientStop Color="#fff7f0e7"
                            Offset="0" />
                            <GradientStop Color="#fff7f0e7"
                            Offset="1" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush"
                TargetName="Border">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1"
                                 StartPoint="0.5,0">
                            <GradientStop Color="#FFCAC3BA"
                            Offset="0" />
                            <GradientStop Color="#FFCAC3BA"
                            Offset="1" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled"
               Value="false">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="#776b5f" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static MenuItem.SubmenuHeaderTemplateKey}"
                   TargetType="{x:Type MenuItem}">
    
        <Border x:Name="Border" 
            BorderThickness="1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"
                            SharedSizeGroup="Icon" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto"
                            SharedSizeGroup="Shortcut" />
                    <ColumnDefinition Width="13" />
                </Grid.ColumnDefinitions>
                <ContentPresenter x:Name="Icon"
                          Margin="6,0,6,0"
                          VerticalAlignment="Center"
                          ContentSource="Icon" />
                <ContentPresenter x:Name="HeaderHost"
                          Grid.Column="1"
                          ContentSource="Header"
                          RecognizesAccessKey="True" Margin="10,18,0,18"/>
                <TextBlock x:Name="InputGestureText"
                   Grid.Column="2"
                   Text="{TemplateBinding InputGestureText}"
                   Margin="5,2,2,2"
                   DockPanel.Dock="Right" Foreground="#FF776B5F" />
                <Path Grid.Column="3"
              HorizontalAlignment="Center"
              VerticalAlignment="Center"
              Data="M 0 0 L 0 7 L 4 3.5 Z">
                    <Path.Fill>
                        <SolidColorBrush Color="Red" />
                    </Path.Fill>
                </Path>
                <Popup x:Name="Popup"
               Placement="Right"
               HorizontalOffset="-4"
               IsOpen="{TemplateBinding IsSubmenuOpen}"
               AllowsTransparency="True"
               Focusable="False"
               PopupAnimation="Fade" >
                    <Border x:Name="SubmenuBorder"
                  SnapsToDevicePixels="True"
                  Background="#00ffffff"
                  BorderThickness="1">
                        <Border.BorderBrush>
                            <SolidColorBrush Color="#00ffffff" />
                        </Border.BorderBrush>
                        <ScrollViewer CanContentScroll="True"
                          Style="{StaticResource MenuScrollViewer}">
                            <StackPanel IsItemsHost="True"
                          KeyboardNavigation.DirectionalNavigation="Cycle" />
                        </ScrollViewer>
                    </Border>
                </Popup>
            </Grid>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Icon"
               Value="{x:Null}">
                <Setter TargetName="Icon"
                Property="Visibility"
                Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsHighlighted"
               Value="true">
                <Setter Property="Background"
                TargetName="Border">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1"
                                 StartPoint="0.5,0">
                            <GradientStop Color="Transparent"
                            Offset="0" />
                            <GradientStop Color="Transparent"
                            Offset="1" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush"
                TargetName="Border">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5,1"
                                 StartPoint="0.5,0">
                            <GradientStop Color="Transparent"
                            Offset="0" />
                            <GradientStop Color="Transparent"
                            Offset="1" />
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger SourceName="Popup"
               Property="AllowsTransparency"
               Value="True">
                <Setter TargetName="SubmenuBorder"
                Property="CornerRadius"
                Value="4" />
                <Setter TargetName="SubmenuBorder"
                Property="Padding"
                Value="0,3,0,3" />
            </Trigger>
            <Trigger Property="IsEnabled"
               Value="false">
                <Setter Property="Foreground">
                    <Setter.Value>
                        <SolidColorBrush Color="#776b5f" />
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- MenuItem Style -->
    <Style x:Key="{x:Type MenuItem}"
         TargetType="{x:Type MenuItem}">
        <Setter Property="OverridesDefaultStyle"
            Value="True" />
        <Style.Triggers>
            <Trigger Property="Role"
               Value="TopLevelHeader">
                <Setter Property="Template"
                Value="{StaticResource {x:Static MenuItem.TopLevelHeaderTemplateKey}}" />
                <Setter Property="Grid.IsSharedSizeScope"
                Value="true" />
            </Trigger>
            <Trigger Property="Role"
               Value="TopLevelItem">
                <Setter Property="Template"
                Value="{StaticResource {x:Static MenuItem.TopLevelItemTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role"
               Value="SubmenuHeader">
                <Setter Property="Template"
                Value="{StaticResource {x:Static MenuItem.SubmenuHeaderTemplateKey}}" />
            </Trigger>
            <Trigger Property="Role"
               Value="SubmenuItem">
                <Setter Property="Template"
                Value="{StaticResource {x:Static MenuItem.SubmenuItemTemplateKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="rLabelStyle" TargetType="{x:Type Label}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Grid>
                        <Ellipse Fill="Red" Stroke="#00000000" StrokeThickness="0"/>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>